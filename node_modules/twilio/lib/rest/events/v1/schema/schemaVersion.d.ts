/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */

import Page = require('../../../../base/Page');
import Response = require('../../../../http/response');
import V1 = require('../../V1');
import { SerializableClass } from '../../../../interfaces';

/**
 * Initialize the VersionList
 *
 * PLEASE NOTE that this class contains preview products that are subject to
 * change. Use them with caution. If you currently do not have developer preview
 * access, please contact help@twilio.com.
 *
 * @param version - Version of the resource
 * @param id - The unique identifier of the schema.
 */
declare function VersionList(version: V1, id: string): VersionListInstance;

interface VersionListInstance {
  /**
   * @param sid - sid of instance
   */
  (sid: string): VersionContext;
  /**
   * Streams VersionInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory
   * efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback
   * function.
   *
   * @param callback - Function to process each record
   */
  each(callback?: (item: VersionInstance, done: (err?: Error) => void) => void): void;
  /**
   * Streams VersionInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory
   * efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback
   * function.
   *
   * @param opts - Options for request
   * @param callback - Function to process each record
   */
  each(opts?: VersionListInstanceEachOptions, callback?: (item: VersionInstance, done: (err?: Error) => void) => void): void;
  /**
   * Constructs a version
   *
   * @param schemaVersion - The version of the schema
   */
  get(schemaVersion: string): VersionContext;
  /**
   * Retrieve a single target page of VersionInstance records from the API.
   *
   * The request is executed immediately.
   *
   * If a function is passed as the first argument, it will be used as the callback
   * function.
   *
   * @param callback - Callback to handle list of records
   */
  getPage(callback?: (error: Error | null, items: VersionPage) => any): Promise<VersionPage>;
  /**
   * Retrieve a single target page of VersionInstance records from the API.
   *
   * The request is executed immediately.
   *
   * If a function is passed as the first argument, it will be used as the callback
   * function.
   *
   * @param targetUrl - API-generated URL for the requested results page
   * @param callback - Callback to handle list of records
   */
  getPage(targetUrl?: string, callback?: (error: Error | null, items: VersionPage) => any): Promise<VersionPage>;
  /**
   * Lists VersionInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback
   * function.
   *
   * @param callback - Callback to handle list of records
   */
  list(callback?: (error: Error | null, items: VersionInstance[]) => any): Promise<VersionInstance[]>;
  /**
   * Lists VersionInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback
   * function.
   *
   * @param opts - Options for request
   * @param callback - Callback to handle list of records
   */
  list(opts?: VersionListInstanceOptions, callback?: (error: Error | null, items: VersionInstance[]) => any): Promise<VersionInstance[]>;
  /**
   * Retrieve a single page of VersionInstance records from the API.
   *
   * The request is executed immediately.
   *
   * If a function is passed as the first argument, it will be used as the callback
   * function.
   *
   * @param callback - Callback to handle list of records
   */
  page(callback?: (error: Error | null, items: VersionPage) => any): Promise<VersionPage>;
  /**
   * Retrieve a single page of VersionInstance records from the API.
   *
   * The request is executed immediately.
   *
   * If a function is passed as the first argument, it will be used as the callback
   * function.
   *
   * @param opts - Options for request
   * @param callback - Callback to handle list of records
   */
  page(opts?: VersionListInstancePageOptions, callback?: (error: Error | null, items: VersionPage) => any): Promise<VersionPage>;
  /**
   * Provide a user-friendly representation
   */
  toJSON(): any;
}

/**
 * Options to pass to each
 *
 * @property callback -
 *                         Function to process each record. If this and a positional
 *                         callback are passed, this one will be used
 * @property done - Function to be called upon completion of streaming
 * @property limit -
 *                         Upper limit for the number of records to return.
 *                         each() guarantees never to return more than limit.
 *                         Default is no limit
 * @property pageSize -
 *                         Number of records to fetch per request,
 *                         when not set will use the default value of 50 records.
 *                         If no pageSize is defined but a limit is defined,
 *                         each() will attempt to read the limit with the most efficient
 *                         page size, i.e. min(limit, 1000)
 */
interface VersionListInstanceEachOptions {
  callback?: (item: VersionInstance, done: (err?: Error) => void) => void;
  done?: Function;
  limit?: number;
  pageSize?: number;
}

/**
 * Options to pass to list
 *
 * @property limit -
 *                         Upper limit for the number of records to return.
 *                         list() guarantees never to return more than limit.
 *                         Default is no limit
 * @property pageSize -
 *                         Number of records to fetch per request,
 *                         when not set will use the default value of 50 records.
 *                         If no page_size is defined but a limit is defined,
 *                         list() will attempt to read the limit with the most
 *                         efficient page size, i.e. min(limit, 1000)
 */
interface VersionListInstanceOptions {
  limit?: number;
  pageSize?: number;
}

/**
 * Options to pass to page
 *
 * @property pageNumber - Page Number, this value is simply for client state
 * @property pageSize - Number of records to return, defaults to 50
 * @property pageToken - PageToken provided by the API
 */
interface VersionListInstancePageOptions {
  pageNumber?: number;
  pageSize?: number;
  pageToken?: string;
}

interface VersionPayload extends VersionResource, Page.TwilioResponsePayload {
}

interface VersionResource {
  date_created: Date;
  id: string;
  raw: string;
  schema_version: number;
  url: string;
}

interface VersionSolution {
  id?: string;
}


declare class VersionContext {
  /**
   * Initialize the VersionContext
   *
   * PLEASE NOTE that this class contains preview products that are subject to
   * change. Use them with caution. If you currently do not have developer preview
   * access, please contact help@twilio.com.
   *
   * @param version - Version of the resource
   * @param id - The unique identifier of the schema.
   * @param schemaVersion - The version of the schema
   */
  constructor(version: V1, id: string, schemaVersion: number);

  /**
   * fetch a VersionInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback?: (error: Error | null, items: VersionInstance) => any): Promise<VersionInstance>;
  /**
   * Provide a user-friendly representation
   */
  toJSON(): any;
}


declare class VersionInstance extends SerializableClass {
  /**
   * Initialize the VersionContext
   *
   * PLEASE NOTE that this class contains preview products that are subject to
   * change. Use them with caution. If you currently do not have developer preview
   * access, please contact help@twilio.com.
   *
   * @param version - Version of the resource
   * @param payload - The instance payload
   * @param id - The unique identifier of the schema.
   * @param schemaVersion - The version of the schema
   */
  constructor(version: V1, payload: VersionPayload, id: string, schemaVersion: number);

  private _proxy: VersionContext;
  dateCreated: Date;
  /**
   * fetch a VersionInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback?: (error: Error | null, items: VersionInstance) => any): Promise<VersionInstance>;
  id: string;
  raw: string;
  schemaVersion: number;
  /**
   * Provide a user-friendly representation
   */
  toJSON(): any;
  url: string;
}


declare class VersionPage extends Page<V1, VersionPayload, VersionResource, VersionInstance> {
  /**
   * Initialize the VersionPage
   *
   * PLEASE NOTE that this class contains preview products that are subject to
   * change. Use them with caution. If you currently do not have developer preview
   * access, please contact help@twilio.com.
   *
   * @param version - Version of the resource
   * @param response - Response from the API
   * @param solution - Path solution
   */
  constructor(version: V1, response: Response<string>, solution: VersionSolution);

  /**
   * Build an instance of VersionInstance
   *
   * @param payload - Payload response from the API
   */
  getInstance(payload: VersionPayload): VersionInstance;
  /**
   * Provide a user-friendly representation
   */
  toJSON(): any;
}

export { VersionContext, VersionInstance, VersionList, VersionListInstance, VersionListInstanceEachOptions, VersionListInstanceOptions, VersionListInstancePageOptions, VersionPage, VersionPayload, VersionResource, VersionSolution }
